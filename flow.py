import os
import random
import requests
from prefect import flow, task
from prefect.logging import get_run_logger
from datetime import datetime

# Set environment variables for Prefect
# PYTHONIOENCODING: √©vite les UnicodeDecodeError sous Windows
# PREFECT_API_URL: indique au SDK o√π se trouve l'API Prefect
os.environ.setdefault("PYTHONIOENCODING", "utf-8")
#os.environ.setdefault("PREFECT_API_URL", "http://127.0.0.1:4200/api")

def send_discord_embed(message):
    """Envoyer un message √† un canal Discord via un Webhook."""
    DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")

    if not DISCORD_WEBHOOK_URL:
        print("Discord webhook URL not configured")
        return

    data = {"embeds": [{
        "title": "R√©sultats du pipeline",
        "description": message,
        "color": 5814783,
        "fields": [{
            "name": "Status",
            "value": "Succ√®s",
            "inline": True
        }]
    }]}

    try:
        response = requests.post(DISCORD_WEBHOOK_URL, json=data, timeout=30)
        if response.status_code != 204:
            print(f"Erreur lors de l'envoi de l'embed : {response.status_code}")
        else:
            print("Embed envoy√© avec succ√®s !")
    except requests.RequestException as e:
        print(f"Erreur de connexion Discord : {e}")

@task(retries=2, retry_delay_seconds=1)
def check_random():
    """
    G√©n√®re un nombre al√©atoire et d√©clenche un retrain si < 0.5
    Le tirage al√©atoire joue le r√¥le d'un test de performance :
    un r√©sultat < 0.5 symbolise la d√©rive d'un mod√®le qu'il faut r√©-entra√Æner.
    """
    logger = get_run_logger()

    # G√©n√©rer un nombre al√©atoire entre 0 et 1
    random_value = random.random()
    logger.info(f"Valeur al√©atoire g√©n√©r√©e: {random_value:.3f}")

    if random_value < 0.5:
        # Symbolise la d√©rive du mod√®le - d√©clenche un √©chec + retries
        logger.warning(f"D√©rive d√©tect√©e! Valeur: {random_value:.3f} < 0.5")
        send_discord_embed(f"üö® D√©rive du mod√®le d√©tect√©e! Valeur: {random_value:.3f} - Retraining n√©cessaire")
        raise ValueError(f"Model drift detected: {random_value:.3f} < 0.5 - Initiating retrain")
    else:
        # Mod√®le OK
        logger.info(f"Mod√®le OK! Valeur: {random_value:.3f} >= 0.5")
        send_discord_embed(f"‚úÖ Mod√®le performant! Valeur: {random_value:.3f}")
        return {"status": "ok", "value": random_value}

@flow
def periodic_check():
    """
    Pipeline Prefect qui s'ex√©cute toutes les 30 secondes :
    g√©n√®re un nombre al√©atoire et, s'il est inf√©rieur √† 0.5,
    d√©clenche un retrain (√©chec + retries) ; sinon, affiche ok.
    """
    logger = get_run_logger()
    logger.info("D√©marrage du pipeline de v√©rification p√©riodique...")

    # Ex√©cuter la v√©rification al√©atoire
    result = check_random()

    logger.info("Pipeline de v√©rification termin√© avec succ√®s")
    return result

if __name__ == "__main__":
    # Planifier l'ex√©cution toutes les 30 secondes
    # Le bloc if __name__ == "__main__": sert √† lancer le scheduler et le worker int√©gr√©s
    # lorsque vous ex√©cutez directement le fichier ; il est ignor√© si le module est import√© ailleurs.
    periodic_check.serve(
        name="random-check-every-30s",
        interval=30,
        description="Pipeline random-check qui s'ex√©cute toutes les 30 secondes"
    )
