name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      if: github.event_name == 'release'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ia-continu-solution:latest
          ${{ secrets.DOCKER_USERNAME }}/ia-continu-solution:${{ steps.get_version.outputs.VERSION }}
        platforms: linux/amd64,linux/arm64
    
    - name: Create deployment package
      run: |
        mkdir -p release-package
        cp -r src/ release-package/
        cp -r config/ release-package/
        cp -r docs/ release-package/
        cp requirements.txt release-package/
        cp docker-compose.yml release-package/
        cp README.md release-package/
        cp LICENSE release-package/
        tar -czf ia-continu-solution-${{ steps.get_version.outputs.VERSION }}.tar.gz release-package/
    
    - name: Upload release assets
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ia-continu-solution-${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_name: ia-continu-solution-${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Notify Discord on release
      if: github.event_name == 'release'
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d '{
               "embeds": [{
                 "title": "ðŸš€ Nouvelle Release",
                 "description": "Version ${{ steps.get_version.outputs.VERSION }} dÃ©ployÃ©e avec succÃ¨s!",
                 "color": 5814783,
                 "fields": [{
                   "name": "Version",
                   "value": "${{ steps.get_version.outputs.VERSION }}",
                   "inline": true
                 }, {
                   "name": "Status",
                   "value": "SuccÃ¨s",
                   "inline": true
                 }]
               }]
             }' \
             ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.event_name == 'release' && !github.event.release.prerelease
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "Version: ${{ github.ref_name }}"
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
    
    - name: Run smoke tests
      run: |
        echo "ðŸ§ª Running smoke tests on staging..."
        # Add smoke tests here
        # Example: curl -f https://staging.example.com/health
    
    - name: Notify deployment status
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d '{
               "embeds": [{
                 "title": "ðŸŽ¯ DÃ©ploiement Staging",
                 "description": "Version ${{ github.ref_name }} dÃ©ployÃ©e en staging",
                 "color": 3447003,
                 "fields": [{
                   "name": "Environment",
                   "value": "Staging",
                   "inline": true
                 }, {
                   "name": "Status",
                   "value": "SuccÃ¨s",
                   "inline": true
                 }]
               }]
             }' \
             ${{ secrets.DISCORD_WEBHOOK_URL }}
