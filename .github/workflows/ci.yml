name: CI/CD Pipeline

on:
  push:
    branches: [ main, jour2, jour3 ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Create necessary directories
      run: |
        mkdir -p data models logs
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ia-continu-solution:latest .
    
    - name: Test Docker image
      run: |
        # Create test environment file
        echo "DISCORD_WEBHOOK_URL=test_webhook" > .env
        
        # Start container in background
        docker run -d --name test-container \
          --env-file .env \
          -p 8000:8000 \
          ia-continu-solution:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check --json || true
    
    - name: Run bandit security linter
      run: |
        bandit -r src/ -f json || true

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        # Create minimal test environment
        echo "DISCORD_WEBHOOK_URL=test_webhook" > .env
    
    - name: Run integration tests with Docker Compose
      run: |
        # Start services
        docker-compose up -d app
        
        # Wait for services to be ready
        sleep 30
        
        # Run integration tests
        docker-compose exec -T app python -m pytest tests/test_complete_system.py -v
        
        # Cleanup
        docker-compose down -v
      env:
        DISCORD_WEBHOOK_URL: test_webhook

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan, integration-test]
    
    steps:
    - name: Quality Gate Summary
      run: |
        echo "âœ… All quality checks passed!"
        echo "- Unit tests: PASSED"
        echo "- Code formatting: PASSED"
        echo "- Docker build: PASSED"
        echo "- Security scan: PASSED"
        echo "- Integration tests: PASSED"
        echo ""
        echo "ðŸš€ Ready for deployment!"
